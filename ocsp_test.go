package sct

import "testing"
import "fmt"
import "bytes"

var ocspExpect []byte = []byte{0x04, 0x81, 0xF1,
	0x00, 0xEF,
	0x00, 0x75,
	0x00, 0x68, 0xF6, 0x98, 0xF8, 0x1F, 0x64, 0x82, 0xBE, 0x3A, 0x8C, 0xEE, 0xB9, 0x28, 0x1D, 0x4C, 0xFC, 0x71, 0x51, 0x5D, 0x67, 0x93, 0xD4, 0x44, 0xD1, 0x0A, 0x67, 0xAC, 0xBB, 0x4F, 0x4F, 0xFB, 0xC4, 0x00, 0x00, 0x01,
	0x45, 0x98, 0xAB, 0x34, 0x02, 0x00, 0x00, 0x04, 0x03, 0x00, 0x46, 0x30, 0x44, 0x02, 0x20, 0x19, 0xAA, 0x26, 0xAF, 0xC0, 0x2C, 0x92, 0xB1, 0xDD, 0x71, 0x75, 0x1E, 0xAE, 0x16, 0x0C, 0x9B, 0x4E, 0x8A, 0x23, 0x90, 0xE4, 0x75, 0xA1, 0x90, 0x3C,
	0xE5, 0x69, 0xEF, 0xEE, 0x9B, 0xAD, 0x2D, 0x02, 0x20, 0x20, 0xFB, 0x14, 0xDB, 0x1E, 0x3E, 0x09, 0x09, 0x51, 0x74, 0x1A, 0x97, 0x68, 0x38, 0x0E, 0x64, 0x18, 0x2A, 0xFA, 0xF6, 0x5F, 0x2A, 0x5C, 0x77, 0xEB, 0x73, 0x3B, 0x0D, 0xD6, 0x4D, 0xCF,
	0xBB,
	0x00, 0x76,
	0x00, 0xA4, 0xB9, 0x09, 0x90, 0xB4, 0x18, 0x58, 0x14, 0x87, 0xBB, 0x13, 0xA2, 0xCC, 0x67, 0x70, 0x0A, 0x3C, 0x35, 0x98, 0x04, 0xF9, 0x1B, 0xDF, 0xB8, 0xE3, 0x77, 0xCD, 0x0E, 0xC8, 0x0D, 0xDC, 0x10, 0x00, 0x00, 0x01, 0x45,
	0x90, 0x6B, 0x3B, 0x07, 0x00, 0x00, 0x04, 0x03, 0x00, 0x47, 0x30, 0x45, 0x02, 0x20, 0x16, 0xC2, 0x50, 0x36, 0x17, 0x32, 0xAC, 0xAC, 0xB5, 0x74, 0x50, 0x2B, 0x02, 0x76, 0x39, 0x94, 0x18, 0x70, 0x8A, 0x7C, 0x2C, 0x0D, 0x04, 0x81, 0x2A, 0x09,
	0xC0, 0x2F, 0xFE, 0x26, 0x20, 0x71, 0x02, 0x21, 0x00, 0xF3, 0xED, 0x1C, 0x92, 0xD2, 0xA6, 0xAC, 0x3C, 0xC5, 0xB3, 0x54, 0xDD, 0xFE, 0x4C, 0xD1, 0xDE, 0x95, 0x60, 0x58, 0x43, 0x73, 0x03, 0x5E, 0x6C, 0x06, 0x12, 0xD0, 0x8E, 0xEF, 0x9A, 0xF2,
	0x3D}

var ct1 = SignedCertificateTimestamp{
	SCTVersion: 0,
	LogID:      [32]byte{0x68, 0xF6, 0x98, 0xF8, 0x1F, 0x64, 0x82, 0xBE, 0x3A, 0x8C, 0xEE, 0xB9, 0x28, 0x1D, 0x4C, 0xFC, 0x71, 0x51, 0x5D, 0x67, 0x93, 0xD4, 0x44, 0xD1, 0x0A, 0x67, 0xAC, 0xBB, 0x4F, 0x4F, 0xFB, 0xC4},
	Timestamp:  0x0000014598AB3402,
	Extensions: nil,
	Signature: DigitallySigned{
		HashAlgorithm:      SHA256,
		SignatureAlgorithm: ECDSA,
		Signature: []byte{0x30, 0x44, 0x02, 0x20, 0x19, 0xAA, 0x26, 0xAF, 0xC0, 0x2C, 0x92, 0xB1, 0xDD, 0x71, 0x75, 0x1E, 0xAE, 0x16, 0x0C, 0x9B, 0x4E, 0x8A, 0x23, 0x90, 0xE4, 0x75, 0xA1, 0x90, 0x3C,
			0xE5, 0x69, 0xEF, 0xEE, 0x9B, 0xAD, 0x2D, 0x02, 0x20, 0x20, 0xFB, 0x14, 0xDB, 0x1E, 0x3E, 0x09, 0x09, 0x51, 0x74, 0x1A, 0x97, 0x68, 0x38, 0x0E, 0x64, 0x18, 0x2A, 0xFA, 0xF6,
			0x5F, 0x2A, 0x5C, 0x77, 0xEB, 0x73, 0x3B, 0x0D, 0xD6, 0x4D, 0xCF, 0xBB},
	},
}

var ct2 = SignedCertificateTimestamp{
	SCTVersion: 0,
	LogID:      [32]byte{0xA4, 0xB9, 0x09, 0x90, 0xB4, 0x18, 0x58, 0x14, 0x87, 0xBB, 0x13, 0xA2, 0xCC, 0x67, 0x70, 0x0A, 0x3C, 0x35, 0x98, 0x04, 0xF9, 0x1B, 0xDF, 0xB8, 0xE3, 0x77, 0xCD, 0x0E, 0xC8, 0x0D, 0xDC, 0x10},
	Timestamp:  0x00000145906B3B07,
	Extensions: nil,
	Signature: DigitallySigned{
		HashAlgorithm:      SHA256,
		SignatureAlgorithm: ECDSA,
		Signature: []byte{0x30, 0x45, 0x02, 0x20, 0x16, 0xC2, 0x50, 0x36, 0x17, 0x32, 0xAC, 0xAC, 0xB5, 0x74, 0x50, 0x2B, 0x02, 0x76, 0x39, 0x94, 0x18, 0x70, 0x8A, 0x7C, 0x2C, 0x0D, 0x04, 0x81, 0x2A, 0x09,
			0xC0, 0x2F, 0xFE, 0x26, 0x20, 0x71, 0x02, 0x21, 0x00, 0xF3, 0xED, 0x1C, 0x92, 0xD2, 0xA6, 0xAC, 0x3C, 0xC5, 0xB3, 0x54, 0xDD, 0xFE, 0x4C, 0xD1, 0xDE, 0x95, 0x60, 0x58, 0x43, 0x73, 0x03, 0x5E, 0x6C, 0x06, 0x12, 0xD0, 0x8E, 0xEF, 0x9A, 0xF2,
			0x3D},
	},
}

func TestCreateOCSPResponse(t *testing.T) {
	var scts []SignedCertificateTimestamp
	scts = append(scts, ct1)
	scts = append(scts, ct2)

	v, err := CreateOCSPResponse(scts)
	if err != nil {
		fmt.Println(err)
		t.Fail()
	}

	if bytes.Compare(v.Value, ocspExpect) != 0 {
		fmt.Println(v.Value)
		fmt.Println("expected:")
		fmt.Println(ocspExpect)
		t.Fail()
	}
}

func BenchmarkCreateOCSPResponse(b *testing.B) {
	var scts []SignedCertificateTimestamp
	scts = append(scts, ct1)
	scts = append(scts, ct2)
	b.ReportAllocs()
	for i := 0; i < b.N; i++ {
		_, err := CreateOCSPResponse(scts)
		if err != nil {
			fmt.Println(err)
			b.Fail()
		}
	}
}
